# -*- coding: utf-8 -*-
"""sentiment analysis.ipnb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vIxjsbw0K5rN5ayIepf6IpVCP6dcSpr2
"""

!pip install transformers datasets torch streamlit pyngrok

import torch
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
from datasets import load_dataset
import numpy as np
from sklearn.metrics import accuracy_score, precision_recall_fscore_support

dataset = load_dataset("imdb")
dataset

tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")

def tokenize(batch):
    return tokenizer(batch["text"], padding="max_length", truncation=True, max_length=128)

dataset = dataset.map(tokenize, batched=True)
dataset = dataset.rename_column("label", "labels")
dataset.set_format("torch", columns=["input_ids", "attention_mask", "labels"])

model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=2)

def compute_metrics(pred):
    labels = pred.label_ids
    preds = np.argmax(pred.predictions, axis=1)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average="binary")
    acc = accuracy_score(labels, preds)
    return {"accuracy": acc, "f1": f1, "precision": precision, "recall": recall}

from transformers import TrainingArguments, Trainer
from tqdm.auto import tqdm

# Custom blue progress bar style
tqdm.pandas(bar_format="{l_bar}{bar:30}{r_bar}", colour="blue")

training_args = TrainingArguments(
    output_dir="./results",
    learning_rate=2e-5,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,   # adjust as needed
    weight_decay=0.01,
    logging_dir="./logs",
    report_to="none"   # ðŸš« disable wandb / tensorboard / mlflow
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=dataset["train"].shuffle(seed=42).select(range(2000)),
    eval_dataset=dataset["test"].shuffle(seed=42).select(range(500)),
    compute_metrics=compute_metrics
)

trainer.train()